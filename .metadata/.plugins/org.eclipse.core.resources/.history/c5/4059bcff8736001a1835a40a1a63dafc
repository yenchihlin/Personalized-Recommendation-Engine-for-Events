package myHashMap;
import java.util.Arrays;
import java.util.Map;

import myHashMap.Node; 
public class MyHashMap<K, V> {
	private final int defaultCapacity = 16;
	private final float defaultLoadfactor = 0.75f;
	int capacity;
	float loadfactor;
	private Node<K, V>[] array;
	private int size;
	public MyHashMap() {
		this.capacity = defaultCapacity;
		this.array = (Node<K, V>[])( new Node[capacity]);
		this.loadfactor = defaultLoadfactor;
	}
	
	public MyHashMap(int capacity, float loadfactor) {
		this.capacity = capacity;
		this.array = (Node<K, V>[])( new Node[capacity]);
		this.loadfactor = loadfactor;
	}
	
	public int size() {
		return this.size;
	}
	
	public boolean isEmpty() {
		return size == 0;
	}
	
	public void clear() {
		Arrays.fill(this.array, null);
		size = 0;
	}
	
	public int hash(K key) {
		if(key == null) {
			return 0;
		}
		int hash = key.hashCode();
		return hash & 0X7FFFFFF;
	}
	
	public int getIndex(K key) {
		return hash(key) % array.length;
	}
	public boolean equalsKey(K k1, K k2) {
		return k1 == k2 || k1 != null && k1.equals(k2);
	}
	
	public boolean equalsValue(V v1, V v2) {
		return v1 == v2 || v1 != null && v1.equals(v2);
	}
	
	public boolean containsKey(K key) {
		int index = getIndex(key);
		Node<K, V> cur = array[index];
		while(cur != null) {
			if(equalsKey(cur.key, key)) {
				return true;
			}
			cur = cur.next;
		}
		
		return false;
	}
	
	public boolean containsValue(V value) {
		if(isEmpty()) {
			return false;
		}
		
		for(Node<K, V> node : array) {
			while(node != null) {
				if(equalsValue(node.value, value)) {
					return true;
				}
				node = node.next;
			}
		}
		
		return false;
	}
	
	
	
	public V get(K key){
		int index = getIndex(key);
		Node<K, V> cur =  array[index];
		while(cur != null) {
			if(equalsKey(cur.key, key)) {
				return cur.value;
			}
			cur = cur.next;
		}
		
		return null;
	}
	
	public V put(K key, V value) {
		int index = getIndex(key);
		Node<K, V> cur = array[index];
		Node<K, V> head = cur;
		while(cur != null) {
			if(equalsKey(cur.key, key)) {
				V result = cur.value;
				cur.value = value;
				return result;
			}
			cur = cur.next;
		}
		
		cur = new Node<K, V>(key, value);
		cur.next = head;
		array[index] = cur;
		size++;
		if(needRehashing()) {
			rehashing();
		}
		return null;
		
	}
	
	public V remove(K key) {
		int index = getIndex(key);
		Node<K, V> cur = array[index];
		Node<K, V> dummyHead = new Node<K, V>(key, null);
		Node<K, V> dummy = dummyHead;
		while(cur != null) {
			if(equalsKey(cur.key, key)) {
				V result = cur.value;
				dummy.next = cur.next;
				cur.next = null;
				array[index] = dummyHead.next;
				size--;
				return result;
			}
			dummy.next = cur;
			cur = cur.next;
		}
		
		return null;
	}
	private boolean needRehashing() {
		float ratio = (size + 0.0f) / array.length;
		return ratio >= loadfactor;
	}
	
	private void rehashing() {
		this.capacity = 2 * capacity;
		Node<K, V>[] oldArray = this.array; 
		this.array = (Node<K, V>[])(new Node[capacity]);
		for(int i = 0; i < oldArray.length; i++) {
			Node<K, V> cur = oldArray[i];
			while(cur != null) {
				put(cur.key, cur.value);
				cur = cur.next;
			}
		}
	}
	
	public static void main(String[] args) {
		MyHashMap<String, Integer> map = new MyHashMap<>();
		map.put("hello", 1);
		map.put("hello", 2);
		map.put("yahoo", 2);
		map.put("hello", 2);
		map.remove("hello");
		map.get("hello");
		map.isEmpty();
		map.size();
		
		System.out.println(map.getIndex("yahoo"));
	}
	
}
